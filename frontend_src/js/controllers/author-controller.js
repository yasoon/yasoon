// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['controllers/base/controller', 'models/authorInfo', 'views/authorInfo-view', 'models/authorPosts', 'views/authorPosts-view', 'models/post', 'views/post-view'], function(Controller, AuthorInfo, AuthorInfoView, AuthorPosts, AuthorPostsView, Post, PostView) {
  'use strict';
  var AuthorController;
  return AuthorController = (function(_super) {

    __extends(AuthorController, _super);

    function AuthorController() {
      return AuthorController.__super__.constructor.apply(this, arguments);
    }

    AuthorController.prototype.postsAction = function(params) {
      var _this = this;
      this.authorInfo = new AuthorInfo({
        id: params.id
      });
      this.authorInfo.fetch(function() {
        var infoView;
        return infoView = new AuthorInfoView({
          model: _this.authorInfo
        });
      });
      this.authorPosts = new AuthorPosts({
        id: params.id
      });
      return this.authorPosts.fetch(function() {
        var newPostView, post, postsView;
        postsView = new AuthorPostsView({
          model: _this.authorPosts
        });
        post = new Post();
        post.data.authorId = params.id;
        newPostView = new PostView({
          model: post
        });
        newPostView.region = 'newPost';
        return newPostView.setButtonMode();
      });
    };

    return AuthorController;

  })(Controller);
});
