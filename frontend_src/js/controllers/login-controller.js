// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['controllers/base/controller', 'chaplin', 'views/auth/login', 'models/auth/login'], function(Controller, Chaplin, LoginView, LoginModel) {
  'use strict';
  var LoginController,
    _this = this;
  return LoginController = (function(_super) {

    __extends(LoginController, _super);

    function LoginController() {
      var _this = this;
      this.hideLogin = function() {
        return LoginController.prototype.hideLogin.apply(_this, arguments);
      };
      this.goLogin = function() {
        return LoginController.prototype.goLogin.apply(_this, arguments);
      };
      this.initialize = function() {
        return LoginController.prototype.initialize.apply(_this, arguments);
      };
      return LoginController.__super__.constructor.apply(this, arguments);
    }

    LoginController.prototype.initialize = function() {
      LoginController.__super__.initialize.apply(this, arguments);
      Chaplin.mediator.subscribe('goLogin', this.goLogin);
      Chaplin.mediator.subscribe('hideLogin', this.hideLogin);
      return this.loginActive = false;
    };

    LoginController.prototype.goLogin = function() {
      var loginModel;
      if (!this.loginActive) {
        this.loginActive = 1;
        loginModel = new LoginModel();
        this.loginView = new LoginView({
          model: loginModel
        });
        return this.loginView.setMode('active');
      }
    };

    LoginController.prototype.hideLogin = function() {
      this.loginActive = false;
      return this.loginView.dispose();
    };

    return LoginController;

  })(Controller);
});
