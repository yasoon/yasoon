// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['controllers/base/controller', 'views/page/author/blank', 'models/author/info', 'views/author/info', 'models/author/interviewQueue', 'views/author/interviewQueue', 'views/page/author/post', 'models/author/post', 'views/author/post'], function(Controller, BlankPageView, AuthorInfo, AuthorInfoView, InterviewQueue, InterviewQueueView, PostPageView, Post, PostView) {
  'use strict';
  var PostController;
  return PostController = (function(_super) {

    __extends(PostController, _super);

    function PostController() {
      return PostController.__super__.constructor.apply(this, arguments);
    }

    PostController.prototype.postAction = function(params) {
      var _this = this;
      if (params.id === 'blank') {
        return this.blankAction(params);
      }
      this.view = new PostPageView();
      this.info = new AuthorInfo({
        id: params.authorId
      });
      this.info.fetch(function() {
        return _this.infoView = new AuthorInfoView({
          model: _this.info
        });
      });
      this.post = new Post({
        id: params.id
      });
      return this.post.fetch(function() {
        _this.view = new PostView({
          model: _this.post
        });
        return _this.view.setRegion('post').setPassiveMode();
      });
    };

    PostController.prototype.blankAction = function(params) {
      var _this = this;
      this.view = new BlankPageView();
      this.info = new AuthorInfo({
        id: params.authorId
      });
      this.info.fetch(function() {
        return _this.infoView = new AuthorInfoView({
          model: _this.info
        });
      });
      this.interview = new InterviewQueue({
        authorId: params.authorId
      });
      return this.interview.fetch(function() {
        return new InterviewQueueView({
          model: _this.interview
        });
      });
    };

    return PostController;

  })(Controller);
});
