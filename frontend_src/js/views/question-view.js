// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/view', 'JST'], function(View, JST) {
  'use strict';
  var QuestionView;
  return QuestionView = (function(_super) {

    __extends(QuestionView, _super);

    function QuestionView() {
      return QuestionView.__super__.constructor.apply(this, arguments);
    }

    QuestionView.prototype.autoRender = false;

    QuestionView.prototype.className = 'post';

    QuestionView.prototype.templateName = 'question';

    QuestionView.prototype.modesHistory = [];

    QuestionView.prototype.initialize = function() {
      QuestionView.__super__.initialize.apply(this, arguments);
      if (this.model.data.preview) {
        return this.previewTouched = true;
      } else {
        return this.previewTouched = false;
      }
    };

    QuestionView.prototype.setButtonMode = function() {
      this.$el.empty();
      this.templateName = 'newQuestionButton';
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'button';
      return this.render();
    };

    QuestionView.prototype.setActiveMode = function() {
      this.$el.empty();
      this.templateName = 'questionActive';
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'active';
      this.render();
      return this.$el.find('.activeQuestionBody').focus();
    };

    QuestionView.prototype.setPassiveMode = function() {
      this.$el.empty();
      this.templateName = 'questionPassive';
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'passive';
      return this.render();
    };

    QuestionView.prototype.setPreviousMode = function() {
      console.log(this.modesHistory);
      if (this.modesHistory[this.modesHistory.length - 1] === 'button') {
        return this.setButtonMode();
      } else if (this.modesHistory[this.modesHistory.length - 1] === 'active') {
        return this.setActiveMode();
      } else if (this.modesHistory[this.modesHistory.length - 1] === 'passive') {
        return this.setPassiveMode();
      }
    };

    QuestionView.prototype.events = {
      'click #newQuestionButton': function() {
        return this.setActiveMode();
      },
      'keydown .activeQuestion': function(e) {
        if (e.keyCode === 27) {
          return this.setPreviousMode();
        }
      },
      'keyup .activeQuestionBody': function(e) {
        return this.model.data.text = this.$el.find('.activeQuestionBody').val();
      },
      'click #sendQuestionButton': function() {
        var _this = this;
        this.$el.find('#sendQuestionButton').hide();
        return this.model.sync(function() {
          return _this.setPreviousMode();
        });
      }
    };

    QuestionView.prototype.getTemplateData = function() {
      return {
        question: this.model.data
      };
    };

    return QuestionView;

  })(View);
});
