// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/view'], function(View) {
  'use strict';
  var EditableView;
  return EditableView = (function(_super) {

    __extends(EditableView, _super);

    function EditableView() {
      return EditableView.__super__.constructor.apply(this, arguments);
    }

    EditableView.prototype.getTemplateFunction = function() {
      var templateFunc;
      return templateFunc = JST[this.currentTemplateName];
    };

    EditableView.prototype.setRegion = function(region) {
      this.region = region;
      return this;
    };

    EditableView.prototype.initialize = function() {
      EditableView.__super__.initialize.apply(this, arguments);
      return this.modesHistory = [];
    };

    EditableView.prototype.rendered = false;

    EditableView.prototype.softRender = function() {
      if (this.rendered) {
        return this.$el.html(JST[this.currentTemplateName](this.getTemplateData()));
      } else {
        this.render();
        return this.rendered = true;
      }
    };

    EditableView.prototype.setButtonMode = function(callback) {
      this.currentTemplateName = "" + this.templateName + "Button";
      this.softRender();
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'button';
      if (typeof callback === "function") {
        callback();
      }
      return this;
    };

    EditableView.prototype.setActiveMode = function(callback) {
      this.currentTemplateName = "" + this.templateName + "Active";
      this.softRender();
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'active';
      if (typeof callback === "function") {
        callback();
      }
      return this;
    };

    EditableView.prototype.setPassiveMode = function(callback) {
      this.currentTemplateName = "" + this.templateName + "Passive";
      this.softRender();
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'passive';
      if (typeof callback === "function") {
        callback();
      }
      return this;
    };

    EditableView.prototype.setPreviousMode = function() {
      if (this.modesHistory[this.modesHistory.length - 1] === 'button') {
        return this.setButtonMode();
      } else if (this.modesHistory[this.modesHistory.length - 1] === 'active') {
        return this.setActiveMode();
      } else if (this.modesHistory[this.modesHistory.length - 1] === 'passive') {
        return this.setPassiveMode();
      }
    };

    return EditableView;

  })(View);
});
