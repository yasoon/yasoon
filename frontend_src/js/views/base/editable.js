// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/view'], function(View) {
  'use strict';
  var EditableView;
  return EditableView = (function(_super) {

    __extends(EditableView, _super);

    function EditableView() {
      return EditableView.__super__.constructor.apply(this, arguments);
    }

    EditableView.prototype.modesHistory = [];

    EditableView.prototype.getTemplateFunction = function() {
      var templateFunc;
      return templateFunc = JST[this.currentTemplateName];
    };

    EditableView.prototype.setButtonMode = function(callback) {
      this.$el.empty();
      this.currentTemplateName = "" + templateName + "Button";
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'button';
      this.render();
      return callback();
    };

    EditableView.prototype.setActiveMode = function(callback) {
      this.$el.empty();
      this.currentTemplateName = "" + templateName + "Active";
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'active';
      this.render();
      return callback();
    };

    EditableView.prototype.setPassiveMode = function(callback) {
      this.$el.empty();
      this.currentTemplateName = "" + templateName + "Passive";
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'passive';
      this.render();
      return callback();
    };

    return EditableView;

  })(View);
});
