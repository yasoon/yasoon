// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/view', 'JST', 'jqueryui', 'chaplin', 'views/base/editable'], function(View, JST, jqueryui, Chaplin, EditableView) {
  'use strict';
  var QueueView, _ref;
  return QueueView = (function(_super) {
    __extends(QueueView, _super);

    function QueueView() {
      this.del = __bind(this.del, this);
      this.add = __bind(this.add, this);
      _ref = QueueView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    QueueView.prototype.autoRender = false;

    QueueView.prototype.initialize = function() {
      QueueView.__super__.initialize.apply(this, arguments);
      Chaplin.mediator.subscribe('modelAdded', this.add);
      return Chaplin.mediator.subscribe('modelDeleted', this.del);
    };

    QueueView.prototype.regions = {
      'elements': '#elements'
    };

    QueueView.prototype.add = function(model) {
      if (model.name === this.model.elementName) {
        this.model.pushElement(model);
        return this.render();
      }
    };

    QueueView.prototype.del = function(id) {
      return this.model.removeDeleted();
    };

    QueueView.prototype.render = function() {
      var el, element, _i, _len, _ref1,
        _this = this;
      QueueView.__super__.render.apply(this, arguments);
      if (this.model.elements.length === 0) {
        if (this.placeholder != null) {
          this.$el.html(JST[this.placeholder](this.getTemplateData()));
        }
      } else {
        _ref1 = this.model.elements;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          element = _ref1[_i];
          el = this.createElementView(element).setRegion('elements');
          if (el instanceof EditableView) {
            el.setMode('passive');
          } else {
            el.render();
          }
        }
        if (this.sortable) {
          this.$el.find('.sortable').sortable({
            cursor: 'move',
            update: function() {
              return _this.updateOrder();
            }
          });
        }
      }
      return pressFooter();
    };

    QueueView.prototype.updateOrder = function() {
      var element, id, model, place, _i, _len, _ref1,
        _this = this;
      place = 0;
      _ref1 = this.$el.find('.element');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        element = _ref1[_i];
        id = $(element).attr('id');
        model = this.model.getElementById(id);
        model.data.place = ++place;
      }
      return this.model.updatePlaces(function() {
        return _this.render();
      });
    };

    QueueView.prototype.getTemplateData = function() {
      return {};
    };

    QueueView.prototype.createElementView = function() {
      throw "Abstract method 'createElementView' must be redefined";
    };

    return QueueView;

  })(View);
});
