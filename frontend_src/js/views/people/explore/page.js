// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/page', 'JST', 'views/common/footer', 'views/people/header', 'categories', 'views/people/explore/postQueue', 'models/people/explore/postQueue'], function(PageView, JST, FooterView, HeaderView, categories, PostQueueView, PostQueueModel) {
  'use strict';
  var PeopleExplorePageView;
  return PeopleExplorePageView = (function(_super) {

    __extends(PeopleExplorePageView, _super);

    function PeopleExplorePageView() {
      return PeopleExplorePageView.__super__.constructor.apply(this, arguments);
    }

    PeopleExplorePageView.prototype.className = 'peopleExplorePage';

    PeopleExplorePageView.prototype.regions = {
      'queue': '#queue',
      'footer': 'footer',
      'header': 'header'
    };

    PeopleExplorePageView.prototype.templateName = 'people_explore_page';

    PeopleExplorePageView.prototype.initialize = function(params) {
      PeopleExplorePageView.__super__.initialize.apply(this, arguments);
      this.activeCategoryId = parseInt(params.catId);
      this.activeCategory = categories[this.activeCategoryId];
      return this.mode = params.mode;
    };

    PeopleExplorePageView.prototype.render = function() {
      var activeCategoryId, aq, mode,
        _this = this;
      PeopleExplorePageView.__super__.render.apply(this, arguments);
      new HeaderView({
        catId: this.activeCategoryId,
        mode: this.mode
      });
      new FooterView();
      aq = new PostQueueModel({
        categoryId: this.activeCategoryId,
        mode: this.mode
      });
      aq.load(function() {
        var aqView;
        aqView = new PostQueueView({
          model: aq
        });
        return aqView.setRegion('queue').render();
      });
      activeCategoryId = this.activeCategoryId;
      mode = this.mode;
      this.$el.find('.category').each(function() {
        if (parseInt($(this).attr('id')) === activeCategoryId) {
          $(this).addClass('active');
        } else {
          $(this).removeClass('active');
        }
        return $(this).attr('href', ("#explore/" + mode + "/") + $(this).attr('href'));
      });
      if (this.mode === 'date') {
        return this.$el.find('#dateButton').addClass('active');
      } else {
        return this.$el.find('#ratingButton').addClass('active');
      }
    };

    PeopleExplorePageView.prototype.getTemplateData = function() {
      var cat, _i, _len;
      for (_i = 0, _len = categories.length; _i < _len; _i++) {
        cat = categories[_i];
        cat.mode = this.mode;
      }
      return {
        categories: categories,
        activeCategory: this.activeCategory,
        activeCatId: this.activeCategoryId,
        mode: this.mode
      };
    };

    return PeopleExplorePageView;

  })(PageView);
});
