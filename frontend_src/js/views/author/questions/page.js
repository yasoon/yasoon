// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/page', 'JST', 'views/common/footer', 'views/author/questions/header', 'views/author/questions/questionQueue', 'models/author/questions/questionQueue', 'views/author/questions/question', 'models/author/questions/question', 'models/author/posts/info', 'views/author/posts/info'], function(PageView, JST, FooterView, HeaderView, QuestionQueueView, QuestionQueueModel, QuestionView, QuestionModel, AuthorInfoModel, AuthorInfoView) {
  'use strict';
  var AuthorQuestionsPageView, _ref;
  return AuthorQuestionsPageView = (function(_super) {
    __extends(AuthorQuestionsPageView, _super);

    function AuthorQuestionsPageView() {
      _ref = AuthorQuestionsPageView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AuthorQuestionsPageView.prototype.className = 'postPage';

    AuthorQuestionsPageView.prototype.regions = {
      'queue': '#queue',
      'new': '#new',
      'footer': 'footer',
      'header': 'header'
    };

    AuthorQuestionsPageView.prototype.templateName = 'author_questions_page';

    AuthorQuestionsPageView.prototype.initialize = function(params) {
      AuthorQuestionsPageView.__super__.initialize.call(this, params);
      return this.authorId = params.authorId;
    };

    AuthorQuestionsPageView.prototype.render = function() {
      var am,
        _this = this;
      am = new AuthorInfoModel({
        authorId: this.authorId
      });
      return am.load(function() {
        var fv, hv, qqModel, qtv;
        _this.model = am;
        AuthorQuestionsPageView.__super__.render.apply(_this, arguments);
        hv = new HeaderView();
        fv = new FooterView();
        qtv = new QuestionView({
          model: new QuestionModel({
            authorId: _this.authorId
          })
        });
        qtv.setRegion('new').setMode('button');
        return qqModel = (new QuestionQueueModel({
          authorId: _this.authorId
        })).load(function() {
          var qqView;
          qqView = new QuestionQueueView({
            model: qqModel
          });
          return qqView.setRegion('queue').render();
        });
      });
    };

    AuthorQuestionsPageView.prototype.getTemplateData = function() {
      return {
        authorId: this.authorId
      };
    };

    return AuthorQuestionsPageView;

  })(PageView);
});
