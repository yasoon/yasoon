// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/page', 'JST', 'views/common/footer', 'views/author/posts/header', 'views/author/posts/new/blank/question', 'models/author/posts/new/blank/question', 'views/author/posts/new/blank/questionQueue', 'models/author/posts/new/blank/questionQueue', 'views/author/posts/new/blank/caption'], function(PageView, JST, FooterView, HeaderView, QuestionView, QuestionModel, QuestionQueueView, QuestionQueueModel, CaptionView) {
  'use strict';
  var AuthorPostsNewBlankPageView, _ref;
  return AuthorPostsNewBlankPageView = (function(_super) {
    __extends(AuthorPostsNewBlankPageView, _super);

    function AuthorPostsNewBlankPageView() {
      _ref = AuthorPostsNewBlankPageView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AuthorPostsNewBlankPageView.prototype.className = 'postPage';

    AuthorPostsNewBlankPageView.prototype.regions = {
      'caption': '#caption',
      'category': '#category',
      'new': '#new',
      'queue': '#queue',
      'footer': 'footer',
      'header': 'header'
    };

    AuthorPostsNewBlankPageView.prototype.templateName = 'author_posts_new_blank_page';

    AuthorPostsNewBlankPageView.prototype.initialize = function(params) {
      AuthorPostsNewBlankPageView.__super__.initialize.call(this, params);
      return this.authorId = params.authorId;
    };

    AuthorPostsNewBlankPageView.prototype.render = function() {
      var cv, fv, hv, qqModel, qtv,
        _this = this;
      AuthorPostsNewBlankPageView.__super__.render.apply(this, arguments);
      hv = new HeaderView();
      fv = new FooterView();
      cv = new CaptionView();
      cv.setRegion('caption').setMode('active');
      qtv = new QuestionView({
        model: new QuestionModel({
          authorId: this.authorId
        })
      });
      qtv.setRegion('new').setMode('button');
      return qqModel = (new QuestionQueueModel({
        authorId: this.authorId
      })).load(function() {
        var qqView;
        qqView = new QuestionQueueView({
          model: qqModel
        });
        return qqView.setRegion('queue').render();
      });
    };

    AuthorPostsNewBlankPageView.prototype.getTemplateData = function() {
      return {
        authorId: this.authorId
      };
    };

    return AuthorPostsNewBlankPageView;

  })(PageView);
});
