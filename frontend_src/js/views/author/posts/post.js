// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/editable', 'JST', 'categories', 'lib/jquery.hotkeys', 'lib/bootstrap.min', 'lib/bootstrap-wysiwyg', 'lib/helper'], function(EditableView, JST, categories, hotkeys, bootstrap, bootstrapWysiwyg, helper) {
  'use strict';
  var AuthorPostsPostView, _ref;
  return AuthorPostsPostView = (function(_super) {
    __extends(AuthorPostsPostView, _super);

    function AuthorPostsPostView() {
      _ref = AuthorPostsPostView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AuthorPostsPostView.prototype.className = 'post';

    AuthorPostsPostView.prototype.templateName = 'author_posts_post';

    AuthorPostsPostView.prototype.modes = ['active', 'preview', 'passive', 'full'];

    AuthorPostsPostView.prototype.addCallback = function() {
      return this.publishEvent('redirect', "author/" + this.model.authorId + "/posts");
    };

    AuthorPostsPostView.prototype.updateCallback = function() {
      return this.publishEvent('redirect', "author/" + this.model.authorId + "/posts");
    };

    AuthorPostsPostView.prototype.getTemplateData = function() {
      var cat, cats, data, key;
      cats = {};
      for (key in categories) {
        cat = categories[key];
        if (key > 0) {
          cats[key] = cat;
        }
      }
      data = AuthorPostsPostView.__super__.getTemplateData.apply(this, arguments);
      data.categories = cats;
      return data;
    };

    AuthorPostsPostView.prototype.render = function() {
      AuthorPostsPostView.__super__.render.apply(this, arguments);
      return $( function () {
        var fonts = ['Serif', 'Sans', 'Arial', 'Arial Black', 'Courier',
                     'Courier New', 'Comic Sans MS', 'Helvetica', 'Impact', 'Lucida Grande', 'Lucida Sans', 'Tahoma', 'Times',
                     'Times New Roman', 'Verdana'],
                fontTarget = $( '[title=Font]' ).siblings( '.dropdown-menu' );

        $.each( fonts, function (idx, fontName) {
            fontTarget.append( $( '<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>' ) );
        } );

        $( 'a[title]' ).tooltip( {container: 'body'} );

        $( '.dropdown-menu input' ).click( function () {
            return false;
        } )
                .change( function () {
                    $( this ).parent( '.dropdown-menu' ).siblings( '.dropdown-toggle' ).dropdown( 'toggle' );
                } )
                .keydown( 'esc', function () {
                    this.value = '';
                    $( this ).change();
                } );

        $( '[data-role=magic-overlay]' ).each( function () {
            var overlay = $( this ), target = $( overlay.data( 'target' ) );
            overlay.css( 'opacity', 0 ).css( 'position', 'absolute' ).offset( target.offset() ).width( target.outerWidth() ).height( target.outerHeight() );
        } );

        $( '#editor' ).wysiwyg().bind( 'DOMNodeInserted DOMNodeRemoved keyup', function () {
            $( '#cleartxt' ).html( strip_tags($( '#editor' ).html()) );
        } );

    } );;
    };

    return AuthorPostsPostView;

  })(EditableView);
});
