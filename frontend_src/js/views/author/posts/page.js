// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['views/base/page', 'JST', 'views/common/footer', 'views/author/posts/header', 'views/author/posts/postQueue', 'models/author/posts/postQueue', 'models/author/posts/info', 'views/author/posts/info'], function(PageView, JST, FooterView, HeaderView, PostQueueView, PostQueueModel, AuthorInfoModel, AuthorInfoView) {
  'use strict';
  var AuthorPostsPageView,
    _this = this;
  return AuthorPostsPageView = (function(_super) {

    __extends(AuthorPostsPageView, _super);

    function AuthorPostsPageView() {
      var _this = this;
      this.render = function() {
        return AuthorPostsPageView.prototype.render.apply(_this, arguments);
      };
      return AuthorPostsPageView.__super__.constructor.apply(this, arguments);
    }

    AuthorPostsPageView.prototype.className = 'postPage';

    AuthorPostsPageView.prototype.regions = {
      'queue': '#queue',
      'author': '#author',
      'footer': 'footer',
      'header': 'header'
    };

    AuthorPostsPageView.prototype.templateName = 'author_posts_page';

    AuthorPostsPageView.prototype.initialize = function(params) {
      AuthorPostsPageView.__super__.initialize.call(this, params);
      return this.authorId = params.authorId;
    };

    AuthorPostsPageView.prototype.render = function() {
      var am,
        _this = this;
      am = new AuthorInfoModel({
        authorId: this.authorId
      });
      return am.load(function() {
        var av, qqModel;
        _this.model = am;
        AuthorPostsPageView.__super__.render.apply(_this, arguments);
        av = new AuthorInfoView({
          model: am
        });
        av.setRegion('author').render();
        new HeaderView();
        new FooterView();
        return qqModel = (new PostQueueModel({
          authorId: _this.authorId
        })).load(function() {
          var qqView;
          qqView = new PostQueueView({
            model: qqModel
          });
          return qqView.setRegion('queue').render();
        });
      });
    };

    AuthorPostsPageView.prototype.getTemplateData = function() {
      return {
        authorId: this.authorId
      };
    };

    return AuthorPostsPageView;

  })(PageView);
});
