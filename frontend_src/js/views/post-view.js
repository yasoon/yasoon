// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['views/base/view', 'JST'], function(View, JST) {
  'use strict';
  var PostView;
  return PostView = (function(_super) {

    __extends(PostView, _super);

    function PostView() {
      return PostView.__super__.constructor.apply(this, arguments);
    }

    PostView.prototype.autoRender = false;

    PostView.prototype.className = 'post';

    PostView.prototype.templateName = 'post';

    PostView.prototype.modesHistory = [];

    PostView.previewTouched = false;

    PostView.prototype.setButtonMode = function() {
      this.templateName = 'newPostButton';
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'button';
      return this.render();
    };

    PostView.prototype.setActiveMode = function() {
      this.templateName = 'postActive';
      if (this.mode != null) {
        this.modesHistory.push(this.mode);
      }
      this.mode = 'active';
      this.render();
      return this.$el.find('.activePost').focus();
    };

    PostView.prototype.events = {
      'click #newPostButton': function() {
        return this.setActiveMode();
      },
      'keydown .activePost': function(e) {
        if (e.keyCode === 27) {
          return this.setButtonMode();
        }
      },
      'keyup .activePostBody': function(e) {
        this.model.data.text = this.$el.find('.activePostBody').val();
        if (!this.previewTouched) {
          this.model.data.preview = this.model.data.text;
          return this.$el.find('.activePostPreview').val(this.model.data.preview);
        }
      },
      'keyup .activePostPreview': function(e) {
        var text, _i, _ref, _results;
        text = this.$el.find('.activePostPreview').val();
        if (text) {
          if ((_ref = e.keyCode, __indexOf.call((function() {
            _results = [];
            for (_i = 48; _i <= 90; _i++){ _results.push(_i); }
            return _results;
          }).apply(this), _ref) >= 0) || e.keyCode === 32) {
            this.previewTouched = true;
          }
        } else {
          this.previewTouched = false;
        }
        return this.model.data.preview = text.substring(0, 300);
      },
      'keyup .activePostCaption': function(e) {
        return this.model.data.caption = this.$el.find('.activePostCaption').val();
      },
      'click #sendPostButton': function() {
        this.$el.find('#sendPostButton').hide();
        return this.model.sync();
      }
    };

    PostView.prototype.getTemplateData = function() {
      return {
        post: this.model.data
      };
    };

    return PostView;

  })(View);
});
