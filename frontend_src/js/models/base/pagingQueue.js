// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['models/base/queue'], function(Queue) {
  var PagingQueue;
  return PagingQueue = (function(_super) {

    __extends(PagingQueue, _super);

    function PagingQueue() {
      return PagingQueue.__super__.constructor.apply(this, arguments);
    }

    PagingQueue.prototype.stack = [];

    PagingQueue.prototype.offset = 0;

    PagingQueue.prototype.limit = 10;

    PagingQueue.prototype.fullyLoaded = false;

    PagingQueue.prototype.loadStack = function(callback) {
      var loadCallback,
        _this = this;
      console.log('stack');
      this.method = 'POST';
      this.url = this.stackUrl;
      this.requestData = {
        offset: this.offset
      };
      loadCallback = function() {
        _this.stack = _this.stack.concat(_this.data);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(loadCallback);
    };

    PagingQueue.prototype.makeLoad = function(loadCallback) {
      var callback;
      callback = function() {
        this.offset += this.limit;
        return typeof loadCallback === "function" ? loadCallback() : void 0;
      };
      this.data = [];
      this.url = this.loadUrl;
      this.method = 'POST';
      this.requestData = {
        map: this.stack.slice(this.offset, +this.limit + 1 || 9e9)
      };
      return this.request(callback);
    };

    PagingQueue.prototype.load = function(callback) {
      var loadCallback,
        _this = this;
      loadCallback = function() {
        var elData, key, _ref;
        console.log(_this.data);
        _ref = _this.data;
        for (key in _ref) {
          elData = _ref[key];
          console.log(_this.elData);
          _this.elements.push(_this.createElementModel(elData));
        }
        return typeof callback === "function" ? callback() : void 0;
      };
      if (this.stack.length < this.offset + this.limit) {
        return this.loadStack(function() {
          return _this.makeLoad(loadCallback);
        });
      } else {
        return this.makeLoad(loadCallback);
      }
    };

    return PagingQueue;

  })(Queue);
});
