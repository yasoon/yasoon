// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

define(['chaplin'], function(Chaplin) {
  var Model, _ref;
  return Model = (function(_super) {
    __extends(Model, _super);

    function Model() {
      _ref = Model.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Model.prototype.data = {};

    Model.prototype.access = 'NONE';

    Model.prototype.url = '';

    Model.prototype.method = '';

    Model.prototype.requestData = '';

    Model.prototype.initialize = function() {
      Model.__super__.initialize.apply(this, arguments);
      this.isLoggedIn = document.cookie.indexOf('PHPSESSID=') >= 0;
      if (this.name == null) {
        throw 'Model name must be defined';
      }
    };

    Model.prototype.formatUrl = function(url) {
      return 'http://' + window.location.host + ("/" + url);
    };

    Model.prototype.validateNotNull = function() {
      var field, fields, _i, _len;
      fields = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        field = fields[_i];
        if ((this.data[field] == null) || this.data[field] === '') {
          return false;
        }
      }
      return true;
    };

    Model.prototype.validateEmail = function(email) {
      var regExp;
      regExp = new RegExp("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?");
      return regExp.test(email);
    };

    Model.prototype.request = function(callback, dontUpdateData) {
      var _this = this;
      if (dontUpdateData == null) {
        dontUpdateData = false;
      }
      return $.ajax({
        url: this.formatUrl(this.url()),
        method: this.method,
        data: this.requestData,
        success: function(data) {
          if (data.access != null) {
            _this.access = data.access;
            data = data.data;
          }
          if (!dontUpdateData) {
            _this.data = data;
          }
          return typeof callback === "function" ? callback(data) : void 0;
        }
      });
    };

    return Model;

  })(Chaplin.Model);
});
