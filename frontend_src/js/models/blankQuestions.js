// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model', 'models/blankQuestion'], function(Chaplin, Model, BlankQuestion) {
  'use strict';
  var BlankQuestions;
  return BlankQuestions = (function(_super) {

    __extends(BlankQuestions, _super);

    function BlankQuestions() {
      return BlankQuestions.__super__.constructor.apply(this, arguments);
    }

    BlankQuestions.prototype.fetch = function(callback) {
      var fetchCallback,
        _this = this;
      this.url = function() {
        return "api/blank_question/get_blank";
      };
      this.fetchParams = {
        method: 'GET',
        data: {}
      };
      this.questions = [];
      fetchCallback = function() {
        var questionData, _i, _len, _ref;
        _ref = _this.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          questionData = _ref[_i];
          _this.questions.push(new BlankQuestion(questionData));
        }
        return callback();
      };
      return this.request(fetchCallback);
    };

    BlankQuestions.prototype.initialize = function() {
      BlankQuestions.__super__.initialize.apply(this, arguments);
      this.subscribeEvent('postAdded', this.postAddedHandler);
      return this.subscribeEvent('postUpdated', this.postUpdatedHandler);
    };

    BlankQuestions.prototype.postAddedHandler = function(post) {
      if (this.id === post.authorId) {
        this.data.unshift(post);
        return this.trigger('updated');
      }
    };

    BlankQuestions.prototype.postUpdatedHandler = function(post) {
      if (this.id === post.authorId) {
        this.data.unshift(post);
        return this.trigger('updated');
      }
    };

    return BlankQuestions;

  })(Model);
});
