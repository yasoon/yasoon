// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var AuthorPostsPostModel;
  return AuthorPostsPostModel = (function(_super) {

    __extends(AuthorPostsPostModel, _super);

    function AuthorPostsPostModel() {
      return AuthorPostsPostModel.__super__.constructor.apply(this, arguments);
    }

    AuthorPostsPostModel.prototype.name = 'AuthorPostsPost';

    AuthorPostsPostModel.prototype.initialize = function(params) {
      AuthorPostsPostModel.__super__.initialize.call(this, params);
      this.authorId = params.authorId;
      return this.id = params.id;
    };

    AuthorPostsPostModel.prototype.load = function(callback) {
      this.method = 'GET';
      this.url = function() {
        return 'api/post/get/' + this.id;
      };
      this.requestData = {};
      return this.request(callback);
    };

    AuthorPostsPostModel.prototype.update = function(callback) {
      var updateCallback,
        _this = this;
      if (!this.validateNotNull('caption', 'preview', 'text')) {
        this.publishEvent('publicError', 'Заголовок, превью и тело поста не могут быть пустыми');
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/post/update';
      };
      this.requestData = {
        model: {
          id: this.data.id,
          caption: this.data.caption,
          text: this.data.text,
          preview: this.data.preview,
          authorId: this.authorId,
          categoryId: this.data.categoryId
        }
      };
      updateCallback = function() {
        _this.publishEvent('modelUpdated', _this);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(updateCallback);
    };

    AuthorPostsPostModel.prototype.add = function(callback) {
      var addCallback,
        _this = this;
      if (!this.validateNotNull('caption', 'preview', 'text')) {
        this.publishEvent('publicError', 'Заголовок, превью и тело поста не могут быть пустыми');
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/post/add';
      };
      this.requestData = {
        model: {
          caption: this.data.caption,
          authorId: this.authorId,
          text: this.data.text,
          preview: this.data.preview,
          categoryId: this.data.categoryId
        }
      };
      addCallback = function() {
        var addedModel;
        addedModel = new AuthorPostsPostModel(_this.authorId);
        addedModel.data = {
          id: _this.data.id,
          place: _this.data.place,
          caption: _this.data.caption,
          date: _this.data.date
        };
        _this.data = {};
        _this.publishEvent('modelAdded', addedModel);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(addCallback);
    };

    AuthorPostsPostModel.prototype["delete"] = function(callback) {
      var deleteCallback,
        _this = this;
      this.method = 'POST';
      this.url = function() {
        return 'api/post/delete';
      };
      this.requestData = {
        model: {
          id: this.data.id
        }
      };
      deleteCallback = function() {
        _this.publishEvent('modelDeleted', _this.data.id);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(deleteCallback);
    };

    return AuthorPostsPostModel;

  })(Model);
});
