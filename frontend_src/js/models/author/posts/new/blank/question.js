// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var AuthorPostsNewBlankQuestionModel, _ref;
  return AuthorPostsNewBlankQuestionModel = (function(_super) {
    __extends(AuthorPostsNewBlankQuestionModel, _super);

    function AuthorPostsNewBlankQuestionModel() {
      _ref = AuthorPostsNewBlankQuestionModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AuthorPostsNewBlankQuestionModel.prototype.name = 'AuthorPostsNewBlankQuestion';

    AuthorPostsNewBlankQuestionModel.prototype.initialize = function(params) {
      AuthorPostsNewBlankQuestionModel.__super__.initialize.call(this, params);
      return this.authorId = params.authorId;
    };

    AuthorPostsNewBlankQuestionModel.prototype.update = function(callback) {
      var updateCallback,
        _this = this;
      if (!this.validateNotNull('caption', 'answer')) {
        this.publishEvent('publicError', 'Поля вопроса и ответа должны быть заполнены');
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/question/update';
      };
      this.requestData = {
        model: {
          id: this.data.id,
          caption: this.data.caption,
          answer: this.data.answer
        }
      };
      updateCallback = function() {
        _this.publishEvent('modelUpdated', _this);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(updateCallback);
    };

    AuthorPostsNewBlankQuestionModel.prototype.add = function(callback) {
      var addCallback,
        _this = this;
      if (!this.validateNotNull('caption')) {
        this.publishEvent('publicError', 'Тест вопроса не может быть пустым');
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/question/add_interview';
      };
      this.requestData = {
        model: {
          caption: this.data.caption,
          authorId: this.authorId,
          answer: this.data.answer
        }
      };
      addCallback = function() {
        var addedModel;
        addedModel = new AuthorPostsNewBlankQuestionModel(_this.authorId);
        addedModel.data = {
          id: _this.data.id,
          place: _this.data.place,
          caption: _this.data.caption,
          date: _this.data.date,
          answer: _this.data.answer
        };
        _this.data = {};
        _this.publishEvent('modelAdded', addedModel);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(addCallback);
    };

    AuthorPostsNewBlankQuestionModel.prototype["delete"] = function(callback) {
      var deleteCallback,
        _this = this;
      this.method = 'POST';
      this.url = function() {
        return 'api/blank_question/delete';
      };
      this.requestData = {
        model: {
          id: this.data.id
        }
      };
      deleteCallback = function() {
        _this.publishEvent('modelDeleted', _this.data.id);
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(deleteCallback);
    };

    return AuthorPostsNewBlankQuestionModel;

  })(Model);
});
