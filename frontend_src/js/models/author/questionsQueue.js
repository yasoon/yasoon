// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model', 'models/author/question'], function(Chaplin, Model, Question) {
  'use strict';
  var BlankQuestionsQueue;
  return BlankQuestionsQueue = (function(_super) {

    __extends(BlankQuestionsQueue, _super);

    function BlankQuestionsQueue() {
      return BlankQuestionsQueue.__super__.constructor.apply(this, arguments);
    }

    BlankQuestionsQueue.prototype.initialize = function(obj) {
      this.questions = [];
      BlankQuestionsQueue.__super__.initialize.apply(this, arguments);
      return this.authorId = obj.authorId;
    };

    BlankQuestionsQueue.prototype.fetch = function(callback) {
      var fetchCallback,
        _this = this;
      fetchCallback = function() {
        var question, questionData, _i, _len, _ref;
        _ref = _this.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          questionData = _ref[_i];
          question = new Question;
          question.data = questionData;
          _this.questions.push(question);
        }
        return typeof callback === "function" ? callback() : void 0;
      };
      this.url = function() {
        return "api/author/get_questions/" + this.authorId;
      };
      this.fetchParams = {
        method: 'GET',
        data: {}
      };
      return this.request(fetchCallback);
    };

    return BlankQuestionsQueue;

  })(Model);
});
