// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var BlankQuestionsPlacesMap;
  return BlankQuestionsPlacesMap = (function(_super) {

    __extends(BlankQuestionsPlacesMap, _super);

    function BlankQuestionsPlacesMap() {
      return BlankQuestionsPlacesMap.__super__.constructor.apply(this, arguments);
    }

    BlankQuestionsPlacesMap.prototype.initialize = function() {
      BlankQuestionsPlacesMap.__super__.initialize.apply(this, arguments);
      return this.map = [];
    };

    BlankQuestionsPlacesMap.prototype.sync = function(callback) {
      var editCallback,
        _this = this;
      if (this.map.length === 0) {
        return;
      }
      this.fetchParams = {};
      this.fetchParams.method = "POST";
      this.fetchParams.data = {
        map: this.map
      };
      this.url = function() {
        return "api/blank_question/update_places";
      };
      editCallback = function() {
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(editCallback);
    };

    return BlankQuestionsPlacesMap;

  })(Model);
});
