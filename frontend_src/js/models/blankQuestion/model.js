// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var BlankQuestion;
  return BlankQuestion = (function(_super) {

    __extends(BlankQuestion, _super);

    function BlankQuestion() {
      return BlankQuestion.__super__.constructor.apply(this, arguments);
    }

    BlankQuestion.prototype.update = function(callback) {
      var editCallback,
        _this = this;
      this.fetchParams.method = "POST";
      this.fetchParams.data = {
        model: {
          id: this.data.id,
          text: this.data.text
        }
      };
      this.url = function() {
        return "api/blank_question/update";
      };
      editCallback = function() {
        return callback();
      };
      return this.request(editCallback);
    };

    BlankQuestion.prototype.add = function(callback) {
      var addCallback,
        _this = this;
      this.fetchParams.method = "POST";
      this.fetchParams.data = {
        model: {
          text: this.data.text,
          place: this.data.place
        }
      };
      console.log(this.fetchParams.data);
      this.url = function() {
        return "api/blank_question/add";
      };
      addCallback = function() {
        return callback();
      };
      return this.request(addCallback);
    };

    BlankQuestion.prototype["delete"] = function(callback) {
      var deleteCallback,
        _this = this;
      this.fetchParams.method = "POST";
      this.fetchParams.data = {
        model: {
          id: this.data.id
        }
      };
      this.url = function() {
        return "api/blank_question/delete";
      };
      deleteCallback = function() {
        return typeof callback === "function" ? callback() : void 0;
      };
      return this.request(deleteCallback());
    };

    return BlankQuestion;

  })(Model);
});
