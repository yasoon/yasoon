// Generated by CoffeeScript 1.6.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var RegisterRegisterModel, _ref;
  return RegisterRegisterModel = (function(_super) {
    __extends(RegisterRegisterModel, _super);

    function RegisterRegisterModel() {
      this.validateEmail = __bind(this.validateEmail, this);
      _ref = RegisterRegisterModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RegisterRegisterModel.prototype.name = 'RegisterRegister';

    RegisterRegisterModel.prototype.load = function(callback) {
      this.method = 'GET';
      this.url = function() {
        return 'api/author/get_private_info';
      };
      this.requestData = {};
      return this.request(callback);
    };

    RegisterRegisterModel.prototype.add = function(callback) {
      var addCallback,
        _this = this;
      if (!this.validateRegFields('name') || !this.validateRegFields('password') || !this.validateEmail(this.data['email'])) {
        $('html,body').animate({
          scrollTop: 150
        }, 'slow');
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/author/register';
      };
      this.requestData = {
        author: {
          name: this.data.name,
          email: this.data.email,
          password: this.data.password,
          shortHistory: this.data.shortHistory,
          job: this.data.job,
          interests: this.data.interests,
          dreams: this.data.dreams,
          homepage: this.data.homepage,
          subscribed: this.data.subscribed
        }
      };
      callback();
      addCallback = function(data) {
        var authorId;
        if (data.error != null) {
          return _this.publishEvent('publicError', 'Пользователь с этим email уже зарегистрирован');
        } else {
          authorId = data.id;
          return callback();
        }
      };
      return this.request(addCallback);
    };

    RegisterRegisterModel.prototype.addStep2 = function(callback) {
      var addCallback,
        _this = this;
      this.method = 'POST';
      this.url = function() {
        return 'api/author/register_step2';
      };
      this.requestData = {
        author: {
          shortHistory: this.data.shortHistory,
          job: this.data.job,
          interests: this.data.interests,
          dreams: this.data.dreams,
          homepage: this.data.homepage
        }
      };
      addCallback = function(data) {
        var authorId;
        if (data.error == null) {
          return authorId = data.id;
        }
      };
      return this.request(addCallback, true);
    };

    RegisterRegisterModel.prototype.update = function(callback) {
      var updateCallback,
        _this = this;
      if (!this.validateRegFields('name') || !this.validateEmail(this.data['email'])) {
        $('html,body').animate({
          scrollTop: 150
        }, 'slow');
        return;
      }
      if (this.data.new_password) {
        if (!this.validateRegFields('old_password')) {
          $('html,body').animate({
            scrollTop: 150
          }, 'slow');
          return;
        }
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/author/editinfo';
      };
      this.requestData = {
        author: {
          id: this.data.id,
          name: this.data.name,
          email: this.data.email,
          password: this.data.password,
          subscribed: this.data.subscribed,
          shortHistory: this.data.shortHistory,
          job: this.data.job,
          interests: this.data.interests,
          dreams: this.data.dreams,
          homepage: this.data.homepage
        }
      };
      updateCallback = function(data) {
        var authorId;
        authorId = data.id;
        return _this.publishEvent('redirect', "author/" + authorId + "/posts");
      };
      return this.request(updateCallback, true);
    };

    RegisterRegisterModel.prototype.validateRegFields = function(fieldName) {
      var registerForm, statusValidate;
      registerForm = $(".register-form, .info-form");
      statusValidate = false;
      if (!this.validateNotNull(fieldName)) {
        registerForm.find(".data_" + fieldName).show();
        registerForm.find("input[data-field='" + fieldName + "']").addClass('error');
        statusValidate = false;
      } else {
        registerForm.find(".data_" + fieldName).hide();
        registerForm.find("input[data-field='" + fieldName + "']").removeClass('error');
        statusValidate = true;
      }
      return statusValidate;
    };

    RegisterRegisterModel.prototype.validateEmail = function(email) {
      var registerForm, statusValidate;
      registerForm = $(".register-form, .info-form");
      statusValidate = false;
      if (!RegisterRegisterModel.__super__.validateEmail.call(this, email)) {
        registerForm.find(".data_email").show();
        registerForm.find("input[data-field='email']").addClass('error');
        statusValidate = false;
      } else {
        registerForm.find(".data_email").hide();
        registerForm.find("input[data-field='email']").removeClass('error');
        statusValidate = true;
      }
      return statusValidate;
    };

    return RegisterRegisterModel;

  })(Model);
});
