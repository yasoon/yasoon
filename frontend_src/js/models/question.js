// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var Question;
  return Question = (function(_super) {

    __extends(Question, _super);

    function Question() {
      return Question.__super__.constructor.apply(this, arguments);
    }

    Question.prototype.add = function(callback) {
      var addCallback,
        _this = this;
      this.fetchParams.method = "POST";
      this.fetchParams.data = {
        model: {
          postId: this.data.postId,
          text: this.data.text,
          authorId: this.data.authorId
        }
      };
      console.log(this.fetchParams.data);
      this.url = function() {
        return "api/question/add";
      };
      addCallback = function() {
        _this.publishEvent('postAdded', _this.data);
        return callback();
      };
      return this.request(addCallback);
    };

    Question.prototype["delete"] = function(callback) {
      var deleteCallback,
        _this = this;
      this.fetchParams.method = "POST";
      this.fetchParams.data = {
        model: {
          id: this.data.id
        }
      };
      this.url = function() {
        return "api/question/delete";
      };
      deleteCallback = function() {
        _this.publishEvent('postDeleted', _this.data);
        return callback();
      };
      return this.request(deleteCallback());
    };

    Question.prototype.sync = function(callback) {
      if (this.data.id) {
        return this.update(callback);
      } else {
        return this.add(callback);
      }
    };

    return Question;

  })(Model);
});
