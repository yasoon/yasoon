// Generated by CoffeeScript 1.6.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var InfoInfoModel,
    _this = this;
  return InfoInfoModel = (function(_super) {

    __extends(InfoInfoModel, _super);

    function InfoInfoModel() {
      var _this = this;
      this.validateEmail = function(email) {
        return InfoInfoModel.prototype.validateEmail.apply(_this, arguments);
      };
      return InfoInfoModel.__super__.constructor.apply(this, arguments);
    }

    InfoInfoModel.prototype.name = 'InfoInfo';

    InfoInfoModel.prototype.add = function(callback) {
      var updateCallback,
        _this = this;
      if (!this.validateInfoFields('name') || !this.validateInfoFields('lastName') || !this.validateInfoFields('password') || !this.validateEmail(this.data['email'])) {
        $('html,body').animate({
          scrollTop: 200
        }, 'slow');
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/user/info/edit';
      };
      this.requestData = {
        model: {
          name: this.data.name,
          lastName: this.data.lastName,
          email: this.data.email,
          password: this.data.password,
          shortHistory: this.data.shortHistory,
          job: this.data.job,
          interests: this.data.interests,
          dreams: this.data.dreams
        }
      };
      updateCallback = function() {
        _this.publishEvent('modelUpdated', _this);
        return typeof callback === "function" ? callback() : void 0;
      };
      console.log(this.data);
      return;
      return this.request(updateCallback);
    };

    InfoInfoModel.prototype.validateInfoFields = function(fieldName) {
      var infoForm, statusValidate;
      infoForm = $(".info-form");
      statusValidate = false;
      if (!this.validateNotNull(fieldName)) {
        infoForm.find(".data_" + fieldName).show();
        statusValidate = false;
      } else {
        infoForm.find(".data_" + fieldName).hide();
        statusValidate = true;
      }
      return statusValidate;
    };

    InfoInfoModel.prototype.validateEmail = function(email) {
      var infoForm, statusValidate;
      infoForm = $(".info-form");
      statusValidate = false;
      if (!InfoInfoModel.__super__.validateEmail.call(this, email)) {
        infoForm.find(".data_email").show();
        statusValidate = false;
      } else {
        infoForm.find(".data_email").hide();
        statusValidate = true;
      }
      return statusValidate;
    };

    return InfoInfoModel;

  })(Model);
});
