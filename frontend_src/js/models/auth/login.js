// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'models/base/model'], function(Chaplin, Model) {
  'use strict';
  var AuthLoginModel, _ref;
  return AuthLoginModel = (function(_super) {
    __extends(AuthLoginModel, _super);

    function AuthLoginModel() {
      _ref = AuthLoginModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AuthLoginModel.prototype.name = 'AuthLogin';

    AuthLoginModel.prototype.add = function(callback) {
      var updateCallback,
        _this = this;
      if (!this.validateRegFields('login') || !this.validateRegFields('password')) {
        return;
      }
      this.method = 'POST';
      this.url = function() {
        return 'api/auth/login';
      };
      this.requestData = {
        model: {
          login: this.data.login,
          password: this.data.password
        }
      };
      updateCallback = function() {
        _this.publishEvent('modelUpdated', _this);
        return typeof callback === "function" ? callback() : void 0;
      };
      console.log(this.data);
      return;
      return this.request(updateCallback);
    };

    AuthLoginModel.prototype.validateAuthFields = function(fieldName) {
      var loginForm, statusValidate;
      loginForm = $(".login-form");
      statusValidate = false;
      if (!this.validateNotNull(fieldName)) {
        loginForm.find(".data_" + fieldName).show();
        statusValidate = false;
      } else {
        loginForm.find(".data_" + fieldName).hide();
        statusValidate = true;
      }
      return statusValidate;
    };

    return AuthLoginModel;

  })(Model);
});
