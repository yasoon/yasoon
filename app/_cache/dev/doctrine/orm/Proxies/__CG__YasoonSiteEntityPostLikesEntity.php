<?php

namespace Proxies\__CG__\Yasoon\Site\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PostLikesEntity extends \Yasoon\Site\Entity\PostLikesEntity implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setPost($post)
    {
        $this->__load();
        return parent::setPost($post);
    }

    public function getPost()
    {
        $this->__load();
        return parent::getPost();
    }

    public function setAuthorId($authorId)
    {
        $this->__load();
        return parent::setAuthorId($authorId);
    }

    public function getAuthorId()
    {
        $this->__load();
        return parent::getAuthorId();
    }

    public function setCountLikes($count_likes)
    {
        $this->__load();
        return parent::setCountLikes($count_likes);
    }

    public function getCountLikes()
    {
        $this->__load();
        return parent::getCountLikes();
    }

    public function setLastDate($last_date)
    {
        $this->__load();
        return parent::setLastDate($last_date);
    }

    public function getLastDate()
    {
        $this->__load();
        return parent::getLastDate();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setPostId($post_id)
    {
        $this->__load();
        return parent::setPostId($post_id);
    }

    public function getPostId()
    {
        $this->__load();
        return parent::getPostId();
    }

    public function setUserIp($user_ip)
    {
        $this->__load();
        return parent::setUserIp($user_ip);
    }

    public function getUserIp()
    {
        $this->__load();
        return parent::getUserIp();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'authorId', 'user_ip', 'post_id', 'last_date', 'count_likes', 'post');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}